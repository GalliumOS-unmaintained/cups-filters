Description: fix denial of service and possible code execution via
 overflow in testtopdf filter
Origin: upstream, http://bzr.linuxfoundation.org/loggerhead/openprinting/cups-filters/revision/7363
Origin: upstream, http://bzr.linuxfoundation.org/loggerhead/openprinting/cups-filters/revision/7365
Bug-RedHat: https://bugzilla.redhat.com/show_bug.cgi?id=1235385
Bug-RedHat: https://bugzilla.redhat.com/show_bug.cgi?id=1238990

Index: cups-filters-1.0.67/filter/texttopdf.c
===================================================================
--- cups-filters-1.0.67.orig/filter/texttopdf.c	2015-07-03 07:04:28.726638254 -0400
+++ cups-filters-1.0.67/filter/texttopdf.c	2015-07-03 07:04:55.322908610 -0400
@@ -172,9 +172,6 @@
 		{ "FN","FB","FI" };
   int i,j;
 
-  free(Page[0]);
-  free(Page);
-
   // embed fonts
   for (i = PrettyPrint ? 2 : 1; i >= 0; i --) {
     for (j = 0; j < NumFonts; j ++) 
@@ -333,18 +330,6 @@
     PageTop    -= 36;
   }
 
- /*
-  * Allocate memory for the page...
-  */
-
-  SizeColumns = (PageRight - PageLeft) / 72.0 * CharsPerInch;
-  SizeLines   = (PageTop - PageBottom) / 72.0 * LinesPerInch;
-
-  Page    = calloc(sizeof(lchar_t *), SizeLines);
-  Page[0] = calloc(sizeof(lchar_t), SizeColumns * SizeLines);
-  for (i = 1; i < SizeLines; i ++)
-    Page[i] = Page[0] + i * SizeColumns;
-
   if (PageColumns > 1)
   {
     ColumnGutter = CharsPerInch / 2;
Index: cups-filters-1.0.67/filter/textcommon.c
===================================================================
--- cups-filters-1.0.67.orig/filter/textcommon.c	2014-04-07 10:40:24.000000000 -0400
+++ cups-filters-1.0.67/filter/textcommon.c	2015-07-03 07:04:55.322908610 -0400
@@ -26,6 +26,7 @@
  */
 
 #include "textcommon.h"
+#include <limits.h>
 
 
 /*
@@ -644,6 +645,45 @@
   if (PrettyPrint)
     PageTop -= 216.0f / LinesPerInch;
 
+ /*
+  * Allocate memory for the page...
+  */
+
+  SizeColumns = (PageRight - PageLeft) / 72.0 * CharsPerInch;
+  SizeLines   = (PageTop - PageBottom) / 72.0 * LinesPerInch;
+
+ /*
+  * Enforce minimum size...
+  */
+  if (SizeColumns < 1)
+    SizeColumns = 1;
+  if (SizeLines < 1)
+    SizeLines = 1;
+
+  if (SizeLines >= INT_MAX / SizeColumns / sizeof(lchar_t))
+  {
+    fprintf(stderr, "ERROR: bad page size\n");
+    exit(1);
+  }
+
+  Page    = calloc(sizeof(lchar_t *), SizeLines);
+  if (!Page)
+  {
+    fprintf(stderr, "ERROR: cannot allocate memory for page\n");
+    exit(1);
+  }
+
+  Page[0] = calloc(sizeof(lchar_t), SizeColumns * SizeLines);
+  if (!Page[0])
+  {
+    free(Page);
+    fprintf(stderr, "ERROR: cannot allocate memory for page\n");
+    exit(1);
+  }
+
+  for (i = 1; i < SizeLines; i ++)
+    Page[i] = Page[0] + i * SizeColumns;
+
   Copies = atoi(argv[4]);
 
   WriteProlog(argv[3], argv[2], getenv("CLASSIFICATION"),
@@ -1122,6 +1162,8 @@
   if (ppd != NULL)
     ppdClose(ppd);
 
+  free(Page[0]);
+  free(Page);
   return (0);
 }
 
